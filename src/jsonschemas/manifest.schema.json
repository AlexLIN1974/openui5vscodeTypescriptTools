{
    "title": "JSON schema for UI5 manifest.json project declaration",
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
    "definitions": {
        "transition": {
            "type": "string",
            "description": "defines how the transition happens; you can choose between slide (default), flip, fade, and show.",
            "enum": [
                "slide",
                "flip",
                "fade",
                "show"
            ],
            "default": "slide"
        },
        "models": {
            "type": "object",
            "base": {
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Model class name",
                        "enum": [
                            "sap.ui.model.resource.ResourceModel",
                            "sap.ui.model.odata.v4.ODataModel",
                            "sap.ui.model.odata.v2.ODataModel",
                            "sap.ui.model.json.JSONModel"
                        ]
                    },
                    "uri": {
                        "type": "string",
                        "description": "Relative URL in the component, taking embeddedBy into account if filled, or server for absolute model"
                    },
                    "settings": {
                        "type": "object",
                        "description": "Object that is passed to the model constructor"
                    },
                    "dataSource": {
                        "type": "string",
                        "description": "String of key or alias from sap.app dataSources to reference an existing data source; the type, uri and settings properties are set according to the data source's type, uri and settings (if not already defined). If the type under sap.app dataSources is OData, an OData Model V2 is created automatically. If you need an OData Model V1, specify the type as well."
                    }
                }
            }
        }
    },
    "properties": {
        "start_url": {
            "type": "string",
            "description": "Start page of your app, if available"
        },
        "_version": {
            "type": "string",
            "description": "mandatory descriptor format version (not w3c)"
        },
        // sap.app **********************************************************************************************************************************************************************
        "sap.app": {
            "type": "object",
            "title": "SAP app settings",
            "required": ["applicationVersion", "title"],
            "properties": {
                "_version": {
                    "type": "string",
                    "description": "SAP app version"
                },
                "id": {
                    "type": "string",
                    "maxLength": 70,
                    "description": "Mandatory attribute: Unique identifier of the app, which must correspond to the component name\r\nThe ID must not exceed 70 characters. It must be unique and must correspond to the component name. "
                },
                "type": {
                    "type": "string",
                    "description": "Type of the application",
                    "enum": [
                        "application", "component", "library"
                    ]
                },
                "i18n": {
                    "type": "string",
                    "maxLength": 100,
                    "default": "i18n.properties",
                    "description": "Relative URL to the properties file that contains the text symbols for the descriptor (The path to the i18n file must not exceed 100 characters)"
                },
                "applicationVersion": {
                    "type": "object",
                    "description": "The version of the application",
                    "properties": {
                        "version": {
                            "type": "string",
                            "description": "The version string",
                            "default": "1.0.0"
                        }
                    }
                },
                "embeds": {
                    "type": "array",
                    "description": "Array of relative paths to the nested manifest.json files. Attribute is mandatory if a nested manifest.json exists."
                },
                "embeddedBy": {
                    "type": "string",
                    "description": "Relative path back to the manifest.json file of an embedding component or library. Attribute is mandatory for a nested manifest.json."
                },
                "title": {
                    "type": "string",
                    "default": "{{title}}",
                    "description": "The entry is language-dependent and specified via {{…}} syntax",
                    "pattern": "\\{\\{.*\\}\\}"
                },
                "subTitle": {
                    "type": "string",
                    "default": "{{subTitle}}",
                    "description": "Subtitle of your application. Language-dependent entry for a subtitle; specified via {{...}} syntax",
                    "pattern": "\\{\\{.*\\}\\}"
                },
                "description": {
                    "type": "string",
                    "description": "Description for your application. Language-dependent entry that is specified via {{…}} syntax",
                    "pattern": "\\{\\{.*\\}\\}"
                },
                "tags": {
                    "type": "object",
                    "description": "Containing an array of language-dependent keywords that are specified via {{…}} syntax",
                    "required": ["keywords"],
                    "properties": {
                        "keywords": {
                            "type": "array",
                            "description": "Array with tag keywords for example 'keywords': ['{{keyWord1}}','{{keyWord2}}']",
                            "items": {
                                "type": "string",
                                "pattern": "\\{\\{.*\\}\\}"
                            }
                        }  
                    }
                },
                "ach": {
                    "type": "string",
                    "description": "Application component hierarchy (SAP's component names for bug reports); attribute is mandatory for SAP apps, but is not used so far for apps developed outside SAP."
                },
                "dataSources": {
                    "type": "object",
                    "description": "Unique key/alias for specifying the used data sources",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "uri": {
                                "type": "string",
                                "description": "Mandatory relative URL in the component; takes embeddedBy into account, if filled, or the server absolute of the data source, for example \"/sap/opu/odata/snce/PO_S_SRV;v=2/\""
                            },
                            "type": {
                                "type": "string",
                                "description": "The type of the data source",
                                "enum": [
                                    "OData", "ODataAnnotation", "XML", "INA", "JSON"
                                ],
                                "default": "OData"
                            },
                            "settings": {
                                "type": "object",
                                "description": "Data source type-specific attributes",
                                "properties": {
                                    "odataVersion": {
                                        "type": "string",
                                        "description": "The version your odata model should use.",
                                        "enum": [
                                            "2.0", "4.0"
                                        ],
                                        "default": "2.0"
                                    },
                                    "localUri": {
                                        "type": "string",
                                        "description": "Relative URL to local metadata document or annotation uri"
                                    },
                                    "annotations": {
                                        "type": "array",
                                        "description": "Array of annotations which references an existing data source of type \"ODataAnnotation\" under sap.app/dataSources"
                                    },
                                    "maxAge": {
                                        "type": "integer",
                                        "description": "Indicates the number of seconds the client is willing to accept with regard to the age of the data that is requested."
                                    }
                                }
                            },
                            "cdsViews": {
                                "type": "array",
                                "description": "Array of directly used CDS views. This attribute is optional and only added if used via INA protocol directly, not if used via OData service."
                            },
                            "offline": {
                                "type": "boolean",
                                "description": "Indicates whether the app is running offline; default is false (online)",
                                "default": false
                            },
                            "sourceTemplate": {
                                "type": "object",
                                "description": "If an app has been generated from a template, this attribute is filled automatically by the generation tool (SAP Web IDE)",
                                "required": ["id", "version"],
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "Mandatory ID of the template from which the app was generated"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Mandatory version of the template from which the app was generated"
                                    },
                                    "packagedWithMySelf": {
                                        "type": "boolean",
                                        "description": "Indicates if the open source component is part of the app (true) or not (false)"
                                    }
                                }
                            },
                            "crossNavigation": {
                                "type": "object",
                                "description": "Cross-navigation for specifying inbounds and outbounds",
                                "required": ["inbounds"],
                                "properties": {
                                    "scopes": {
                                        "type": "object",
                                        "description": "Scope of a site",
                                        "properties": {
                                            "sapSite": {
                                                "type": "object",
                                                "properties": {
                                                    "value": {
                                                        "type": "string",
                                                        "description": "unique ID of a site. The scope is set in runtime programmatically or by specific property. Which scope and scope value to set will be detailed in the documentation or applied by a tool."
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "inbounds": {
                                        "type": "object",
                                        "description": "Unique key or alias to specify inbounds (mandatory)",
                                        "required": ["semanticObject", "action"],
                                        "properties": {
                                            // TODO Finish
                                        }
                                    }
                                    // TODO: Finish
                                }
                            }
                        }
                    }
                }
            }
        },
        // sap.ui5 **********************************************************************************************************************************************************************
        "sap.ui5": {
            "properties": {
                "models": {},
                "routing": {
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Provides configuration parameters for route and router",
                            "properties": {
                                "routerClass": {
                                    "type": "string",
                                    "description": "router class to use",
                                    "default": "sap.ui.core.routing.Router",
                                    "enum": [
                                        "sap.ui.core.routing.Router",
                                        "sap.m.routing.Router"
                                    ]
                                },
                                "async": {
                                    "type": "boolean",
                                    "description": "Async routing",
                                    "default": false
                                },
                                "viewType": {
                                    "type": "string",
                                    "description": "Type of the view",
                                    "enum": [
                                        "XML",
                                        "JSON",
                                        "JavaScript",
                                        "HTML"
                                    ]
                                },
                                "viewPath": {
                                    "type": "string",
                                    "description": "where the view is located in the app (Namespace synthax e.g. 'myapp.views'"
                                },
                                "controlId": {
                                    "type": "string",
                                    "description": "controlId of the control that is used to display the view (e.g. app)"
                                },
                                "viewLevel": {
                                    "type": "integer",
                                    "description": "if you have different levels of navigation, especially for flip and slide transitions, where, for example, it is important to know whether the slide animation should go from left to right or vice versa"
                                },
                                "controlAggregation": {
                                    "type": "string",
                                    "description": "target aggregation to which the view is added. The NavContainer control, for example, has an aggregation called Pages and the shell container has Content"
                                },
                                "targetParent": {
                                    "type": "string",
                                    "description": "where the control is located"
                                },
                                "transition": {
                                    "$ref": "#/definitions/transition"
                                },
                                "bypassed": {
                                    "type": "object",
                                    "description": "Using the bypassed parameter, you specify the navigation target that is used whenever no navigation pattern is matched. If you use this setting, you also have to define a corresponding target in the targets section.",
                                    "properties": {
                                        "target": {
                                            "type": "string",
                                            "description": "description",
                                            "default": "notFound"
                                        }
                                    }
                                }
                            }
                        },
                        "routes": {
                            "type": "array",
                            "description": "Each route defines a name, a pattern, and optionally one or more targets to which to navigate when the route has been matched.",
                            "items": {
                                "type": "object",
                                "uniqueItems": true,
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the route (unique within one router instance)"
                                    },
                                    "pattern": {
                                        "type": "string",
                                        "description": "The pattern as hash part of the URL that matches the route"
                                    },
                                    "target": {
                                        "type": [
                                            "string",
                                            "array"
                                        ],
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The navigation target as defined in the targets section. If you want to load multiple views at the same time, you can assign multiple targets."
                                    },
                                    "parent": {
                                        "type": "string",
                                        "description": "The parent to specify a route reference in a parent component (in nested components)"
                                    }
                                }
                            }
                        },
                        "targets": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "viewName": {
                                        "type": "string",
                                        "description": "Address of the view to be targeted (namespace, e.g. 'myapp.views.myview')"
                                    },
                                    "viewPath": {
                                        "type": "string",
                                        "description": "where the view is located in the app"
                                    },
                                    "viewId": {
                                        "type": "string",
                                        "description": "Id of the view instance"
                                    },
                                    "viewLevel": {
                                        "type": "integer",
                                        "description": "if you have different levels of navigation, especially for flip and slide transitions, where, for example, it is important to know whether the slide animation should go from left to right or vice versa"
                                    },
                                    "controlId": {
                                        "type": "string",
                                        "description": "controlId of the control that is used to display the view (e.g. app)"
                                    },
                                    "targetParent": {
                                        "type": "string",
                                        "description": "where the control is located"
                                    },
                                    "controlAggregation": {
                                        "type": "string",
                                        "description": "target aggregation to which the view is added. The NavContainer control, for example, has an aggregation called Pages and the shell container has Content."
                                    },
                                    "clearAggregation": {
                                        "type": "string",
                                        "description": "clearAggregation specifies whether the aggregation should be cleared before adding the new view instance."
                                    },
                                    "transition": {
                                        "$ref": "#/definitions/transition"
                                    },
                                    "parent": {
                                        "type": "string",
                                        "description": "The view is created and added before the target view is added"
                                    }
                                }
                            },
                            "description": "A target defines the view that is displayed. It is associated with one or more routes or it can be displayed manually from within the app. Whenever a target is displayed, the corresponding view is loaded and added to the aggregation configured with the controlAggregation option of the control."
                        },
                        "owner": {
                            "type": "string",
                            "description": "The owner parameter defines the owner of all views that are created by the router. This is typically a UIComponent. This parameter is set automatically if the router instance is instantiated by a component."
                        }
                    }
                }
            }
        }
    }
}